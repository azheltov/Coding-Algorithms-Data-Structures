Dinamic Programming =   divide&conquer + memoization

(caching ref "backpack for school" affects speed)
breaking big problems into small, solving small problems, storing these solutions in case the same subproblem occres. 

Memoization - add to cache

Memoization effectively refers to remembering ("memoization" → "memorandum" → to be remembered) results of method calls based on the method 
inputs and then returning the remembered result rather than computing the result again. You can think of it as a cache for method results. 
For further details, see page 387 for the definition in Introduction To Algorithms (3e), Cormen et al.

A simple example for computing factorials using memoization in Python would be something like this:

factorial_memo = {}
def factorial(k):
    if k < 2: return 1
    if k not in factorial_memo:
        factorial_memo[k] = k * factorial(k-1)
    return factorial_memo[k]
You can get more complicated and encapsulate the memoization process into a class:

class Memoize:
    def __init__(self, f):
        self.f = f
        self.memo = {}
    def __call__(self, *args):
        if not args in self.memo:
            self.memo[args] = self.f(*args)
        #Warning: You may wish to do a deepcopy here if returning objects
        return self.memo[args]
Then:

def factorial(k):
    if k < 2: return 1
    return k * factorial(k - 1)

factorial = Memoize(factorial)


### closures like in JS, but in Python: 
def print_msg(msg):
    # This is the outer enclosing function

    def printer():
        # This is the nested function
        print(msg)

    printer()

# We execute the function
# Output: Hello
print_msg("Hello")



1.can we divide into subpoblem
2.recoursive solution
3.are there repetitive subproblems
4.memoize subproblems



